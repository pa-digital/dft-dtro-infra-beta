name: Deploy Resources
on:
  workflow_call:
    secrets:
      workload_identity_provider:
        required: true
      wip_service_account:
        required: true
      execution_service_account:
        required: true
      access_level_members:
        required: true
    inputs:
      gcp-project-id:
        type: string
        required: true
      gcp-region:
        type: string
        required: true
      environment:
        type: string
        required: true
      do-validation-checks:
        type: boolean
        required: false
        default: false

env:
  TF_VAR_tf_state_bucket: dft-d-tro-terraform-${{ inputs.environment }}
  TF_VAR_environment: ${{ inputs.environment }}
  TF_VAR_region: ${{ inputs.gcp-region }}
  TF_VAR_project_id: ${{ inputs.gcp-project-id }}
  TF_VAR_execution_service_account: ${{ secrets.execution_service_account }}
  TF_VAR_wip_service_account: ${{ secrets.wip_service_account }}
  TF_VAR_access_level_members: ${{ secrets.access_level_members }}
#  TF_LOG: DEBUG

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  deploy-resources:
    name: Deploy GCP Resources to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.wip_service_account }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        if: ${{ inputs.do-validation-checks }}
        run: terraform fmt -check -recursive

      - name: terraform validate
        if: ${{ inputs.do-validation-checks }}
        uses: dflook/terraform-validate@v1

      - name: Checkov GitHub Action
        if: ${{ inputs.do-validation-checks }}
        uses: bridgecrewio/checkov-action@v12
        with:
          # CKV_SECRET*: not related to files within this repo
          # CKV2_GHA_1: to be addressed
          skip_check: CKV_TF_1,CKV_GCP_84,CKV_SECRET*,CKV2_GHA_1
          output_format: github_failed_only
          output_file_path: console

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config "bucket=${{env.TF_VAR_tf_state_bucket}}" \
          -backend-config "prefix=terraform/state"

      - name: Terraform Plan
        run: terraform plan -input=false -out terraform-plan-gcp

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false terraform-plan-gcp

#  deploy-apigee-proxies-and-portal:
#    name: Deploy GCP Apigee proxies and portal to ${{ inputs.environment }}
##    needs:
##      - deploy-resources
#    runs-on: ubuntu-latest
#    permissions:
#      id-token: write
#      contents: read
#      packages: read
#      actions: read
#      pull-requests: write
#    defaults:
#      run:
#        shell: bash
#        working-directory: apigee
#    env:
#      name_prefix: dtro-${{ inputs.environment }}-apigee
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set executable permissions for environment script
#        run: chmod +x environments/*
#
#      - name: Load Env Vars for Apigee script
#        run: ./environments/load_environment_variables.sh
#        env:
#          github_ref: ${{ github.ref }}
#          environment: ${{ inputs.environment }}
#          service_account: ${{ secrets.wip_service_account }}
#          apigee_organisation: ${{ inputs.gcp-project-id }}
#
#      - name: Authenticate to Google Cloud
#        id: google-auth
#        uses: google-github-actions/auth@v2
#        with:
#          workload_identity_provider: ${{ secrets.workload_identity_provider }}
#          service_account: ${{ secrets.wip_service_account }}
#          token_format: access_token
#
#      - name: Set up ApigeeCLI
#        run: |
#          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh
#          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH
#
#      - name: Make scripts directory executable
#        run: chmod +x scripts/*
#
#      # Create new workflow to create portals with parameters. Use this for testing
#      - name: Create Developer Portal
#        run: scripts/create_developer_portal.sh ${{ steps.google-auth.outputs.access_token }}
#
#      - name: Create API bundle
#        working-directory: apigee/proxies/d-tro
#        run: zip -r proxy.zip apiproxy
#
#      - name: Upload and Deploy API Proxy Bundle
#        working-directory: apigee/proxies/d-tro
#        run: |
#          env=$env
#          apigeecli apis create bundle --name d-tro --proxy-zip proxy.zip --token "${{ steps.google-auth.outputs.access_token }}" --org "$apigee_organisation" --ovr --wait=true
#          apigeecli apis deploy --env "${{ env.name_prefix }}-environment" --name d-tro --token "${{ steps.google-auth.outputs.access_token }}" --org "$apigee_organisation" --ovr #--wait=true
