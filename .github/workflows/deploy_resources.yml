name: Deploy Resources
on:
  workflow_call:
    secrets:
      workload_identity_provider:
        required: true
      wip_service_account:
        required: true
      execution_service_account:
        required: true
      dft_organisation:
        required: true
      dft_organisation_id:
        required: true
      access_level_members:
        required: true
      apigee_service_endpoint:
        required: true
    inputs:
      gcp-project-id:
        type: string
        required: true
      gcp-region:
        type: string
        required: true
      environment:
        type: string
        required: true
      do-validation-checks:
        type: boolean
        required: false
        default: false
      checkov-skip-check:
        type: string
        required: false
        default: false
      run-terraform:
        type: boolean
        description: Run terraform?
        required: false
        default: true
      run-apigee-1:
        type: boolean
        description: Run Apigee job 1?
        required: false
        default: false

env:
  TF_VAR_tf_state_bucket: dft-d-tro-terraform-${{ inputs.environment }}
  TF_VAR_environment: ${{ inputs.environment }}
  TF_VAR_region: ${{ inputs.gcp-region }}
  TF_VAR_project_id: ${{ inputs.gcp-project-id }}
  TF_VAR_organisation: ${{ secrets.dft-organisation }}
  TF_VAR_organisation_id: ${{ secrets.dft-organisation-id }}
  TF_VAR_execution_service_account: ${{ secrets.execution_service_account }}
  TF_VAR_wip_service_account: ${{ secrets.wip_service_account }}
  TF_VAR_access_level_members: ${{ secrets.access_level_members }}
  TF_VAR_apigee_service_endpoint: ${{ secrets.apigee_service_endpoint}}

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  deploy-resources:
    name: Deploy GCP Resources to ${{ inputs.environment }}
    if: ${{ inputs.run-terraform }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.wip_service_account }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        if: ${{ inputs.do-validation-checks }}
        run: terraform fmt -check -recursive

      - name: terraform validate
        if: ${{ inputs.do-validation-checks }}
        uses: dflook/terraform-validate@v1

      - name: Checkov GitHub Action355
        if: ${{ inputs.do-validation-checks }}
        uses: bridgecrewio/checkov-action@v12
        with:
          skip_check: ${{ vars.CHECKOV_SKIP_CHECK }}
          output_format: github_failed_only
          output_file_path: console

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config "bucket=${{env.TF_VAR_tf_state_bucket}}" \
          -backend-config "prefix=terraform/state"

      - name: Terraform Plan
        run: terraform plan -input=false -out terraform-plan-gcp

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false terraform-plan-gcp

  deploy-apigee-proxies-and-portal:
    if: ${{ inputs.run-apigee-1 }}
    name: Deploy GCP Apigee proxies and portal to ${{ inputs.environment }}
    needs:
      - deploy-resources
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: apigee
    env:
      name_prefix: dtro-${{ inputs.environment }}-apigee
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set executable permissions for environment script
        run: chmod +x environments/*

      - name: Load Env Vars for Apigee script
        run: ./environments/load_environment_variables.sh
        env:
          github_ref: ${{ github.ref }}
          environment: ${{ inputs.environment }}
          service_account: ${{ secrets.wip_service_account }}
          apigee_organisation: ${{ inputs.gcp-project-id }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.workload_identity_provider }}
          service_account: ${{ secrets.wip_service_account }}
          token_format: access_token

      - name: Set up ApigeeCLI
        run: |
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Make scripts directory executable
        run: chmod +x scripts/*

      - name: Create Developer Portal
        if: ${{ inputs.environment != 'prod' }}
        run: scripts/create_developer_portal.sh ${{ steps.google-auth.outputs.access_token }}

      - name: Create API bundle
        working-directory: apigee/proxies/oauth-generator
        run: zip -r proxy.zip apiproxy

      - name: Upload and Deploy API Proxy Bundle
        working-directory: apigee/proxies/oauth-generator
        run: |
          env=$env
          apigeecli apis create bundle --name oauth-generator --proxy-zip proxy.zip --token "${{ steps.google-auth.outputs.access_token }}" --org "$apigee_organisation" --ovr --wait=true
          apigeecli apis deploy --env "${{ env.name_prefix }}-environment" --name oauth-generator --token "${{ steps.google-auth.outputs.access_token }}" --org "$apigee_organisation" --ovr #--wait=true
