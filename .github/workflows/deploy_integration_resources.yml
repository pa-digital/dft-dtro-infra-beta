name: Deploy Integration Resources
on:
  workflow_dispatch:
    inputs:
      run-terraform:
        type: boolean
        description: Run terraform?
        required: false
        default: false
      run-apigee:
        type: boolean
        description: Run Apigee job?
        required: false
        default: false

env:
  TF_VAR_tf_state_bucket: dft-d-tro-terraform-test
  TF_VAR_environment: test
  TF_VAR_integration_prefix: int
  TF_VAR_region: ${{ vars.DEFAULT_GCP_REGION }}
  TF_VAR_project_id: ${{ vars.GCP_PROJECT_ID_TEST }}
  TF_VAR_organisation: ${{ vars.DFT_ORGANISATION }}
  TF_VAR_organisation_id: ${{ vars.DFT_ORGANISATION_ID }}
  TF_VAR_execution_service_account: ${{ secrets.EXECUTION_SERVICE_ACCOUNT_TEST }}
  TF_VAR_wip_service_account: ${{ secrets.WIP_SERVICE_ACCOUNT_TEST }}
  TF_VAR_access_level_members: ${{ secrets.ACCESS_LEVEL_MEMBERS }}

permissions:
  contents: read
  packages: read
  actions: read

jobs:
  deploy-resources:
    name: Deploy GCP Resources to Integration
    if: ${{ inputs.run-terraform }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: terraform-int
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_TEST }}
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT_TEST }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
          -backend-config "bucket=${{env.TF_VAR_tf_state_bucket}}" \
          -backend-config "prefix=terraform/int-state"

      - name: Terraform Plan
        run: terraform plan -input=false -out terraform-plan-gcp-int

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false terraform-plan-gcp-int

  deploy-apigee-proxies-and-portal:
    name: Deploy GCP Apigee proxies and portal to Integration
    if: ${{ inputs.run-apigee }}
#    needs:
#      - deploy-resources
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: read
      actions: read
      pull-requests: write
    defaults:
      run:
        shell: bash
        working-directory: apigee
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set executable permissions for environment script
        run: chmod +x environments/*

      - name: Load Env Vars for Apigee script
        run: ./environments/load_environment_variables.sh
        env:
          github_ref: ${{ github.ref }}
          environment: ${{ env.TF_VAR_environment }}
          env_name_prefix: ${{ env.TF_VAR_integration_prefix }}
          service_account: ${{ env.TF_VAR_execution_service_account }}
          apigee_organisation: ${{ env.TF_VAR_project_id }}

      - name: Authenticate to Google Cloud
        id: google-auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_TEST }}
          service_account: ${{ secrets.WIP_SERVICE_ACCOUNT_TEST }}
          token_format: access_token

      - name: Set up ApigeeCLI
        run: |
          curl -L https://raw.githubusercontent.com/apigee/apigeecli/main/downloadLatest.sh | sh
          echo "$HOME/.apigeecli/bin" >> $GITHUB_PATH

      - name: Make scripts directory executable
        run: chmod +x scripts/*

      - name: Create Developer Portal
        run: scripts/create_developer_portal.sh ${{ steps.google-auth.outputs.access_token }}

      - name: Create API bundle
        working-directory: apigee/proxies/oauth-generator
        run: zip -r proxy.zip apiproxy

      - name: Upload and Deploy API Proxy Bundle
        working-directory: apigee/proxies/oauth-generator
        run: |
          env=$env
          apigeecli apis create bundle --name oauth-generator --proxy-zip proxy.zip --token "${{ steps.google-auth.outputs.access_token }}" --org "$apigee_organisation" --ovr --wait=true
          apigeecli apis deploy --env "dtro-${{ env.TF_VAR_integration_prefix }}-apigee-environment" --name oauth-generator --token "${{ steps.google-auth.outputs.access_token }}" --org "$apigee_organisation" --ovr #--wait=true
